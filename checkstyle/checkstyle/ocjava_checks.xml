<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
  Based on jGrasp CSD-formatting and Google Java style.
  Working on making it match UW Java Style.
  
  Google style is documented here:
  https://google.github.io/styleguide/javaguide.html
  
  And the Checkstyle mapping is noted here:
  http://checkstyle.sourceforge.net/google_style.html

  See also the Javadoc guidelines at
  http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html

  Checkstyle is very configurable. See the documentation at
  http://checkstyle.sf.net.

  To completely disable a check, just comment it out or delete it from the file.
-->

<module name="Checker">
   <property name="charset" value="UTF-8"/>
   <property name="severity" value="warning"/>

   <!-- Checks that property files contain the same keys.         -->
   <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
   <module name="Translation"/>

   <module name="NewlineAtEndOfFile"/>

   <module name="TreeWalker">
      <property name="tabWidth" value="3" />

      <module name="Indentation">
         <property name="basicOffset" value="3"/>
         <property name="caseIndent" value="3"/>
         <property name="throwsIndent" value="3"/>
         <property name="arrayInitIndent" value="3"/>
         <property name="lineWrappingIndentation" value="3"/>
      </module>

      <!-- Checks for Javadoc comments.                     -->
      <!-- See http://checkstyle.sf.net/config_javadoc.html -->
      <module name="JavadocMethod"/>
      <module name="JavadocType"/>
      <module name="JavadocVariable"/>
      <module name="JavadocStyle"/>

      <!-- Checks for Naming Conventions.                  -->
      <!-- See http://checkstyle.sf.net/config_naming.html -->
      <module name="ConstantName">
        <property name="format" value="^[A-Z][A-Z_0-9]+$"/>
        <message key="name.invalidPattern"
             value="Constant name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="LocalFinalVariableName">
        <property name="format" value="^[A-Z][A-Z_0-9]+$"/>
        <message key="name.invalidPattern"
             value="Local constant name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="StaticVariableName">
        <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
        <message key="name.invalidPattern"
             value="Static variable name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="TypeName">
        <message key="name.invalidPattern"
             value="Type name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="MemberName">
        <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
        <message key="name.invalidPattern"
             value="Member name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="ParameterName">
        <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
        <message key="name.invalidPattern"
             value="Parameter name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="CatchParameterName">
        <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
        <message key="name.invalidPattern"
             value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="LocalVariableName">
        <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
        <property name="allowOneCharVarInForLoop" value="true"/>
        <message key="name.invalidPattern"
             value="Local variable name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="ClassTypeParameterName">
        <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
        <message key="name.invalidPattern"
             value="Class type name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="MethodTypeParameterName">
        <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
        <message key="name.invalidPattern"
             value="Method type name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="InterfaceTypeParameterName">
        <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
        <message key="name.invalidPattern"
             value="Interface type name ''{0}'' must match pattern ''{1}''."/>
      </module>
      <module name="NoFinalizer"/>
      <module name="GenericWhitespace">
        <message key="ws.followed"
             value="GenericWhitespace ''{0}'' is followed by whitespace."/>
         <message key="ws.preceded"
             value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
             <message key="ws.illegalFollow"
             value="GenericWhitespace ''{0}'' should followed by whitespace."/>
             <message key="ws.notPreceded"
             value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
      </module>


      <!-- Checks for imports                              -->
      <!-- See http://checkstyle.sf.net/config_import.html -->
      <module name="AvoidStarImport"/>
      <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
      <module name="RedundantImport"/>
      <module name="UnusedImports"/>

      <!-- Checks for Size Violations.                    -->
      <!-- See http://checkstyle.sf.net/config_sizes.html -->
      <!-- @argoc from google, but 80; want 80 warn 100 error... -->
      <module name="LineLength">
            <property name="max" value="80"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
      </module>

      <!-- ignores blank lines and comments -->
      <module name="MethodLength">
          <property name="max" value="30"/>
          <message key="maxLen.method"
                   value="Member ''{0}'' may be over 30 lines of code."
          />
      </module>
      <!-- detects over 30 stmts in a method - 
           not sure how it computes "statements"... -->
      <module name="ExecutableStatementCount"/>
      <module name="ParameterNumber">
         <property name="max" value="10"/>
      </module>

      <!-- Checks for whitespace                               -->
      <!-- See http://checkstyle.sf.net/config_whitespace.html -->
      <module name="EmptyForIteratorPad"/>
      <module name="MethodParamPad"/>
      <module name="NoWhitespaceAfter">
         <property name="tokens" value="BNOT, DEC, DOT,
            INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
      </module>
      <module name="NoWhitespaceBefore"/>
      <module name="OperatorWrap"/>
      <module name="ParenPad"/>
      <module name="TypecastParenPad"/>
      <module name="WhitespaceAfter"/>
      <module name="WhitespaceAround">
         <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN,
         BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON,
         DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE,
         LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
         LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
         LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT,
         MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS,
         PLUS_ASSIGN, RCURLY, SL, SLIST, SL_ASSIGN, SR,
         SR_ASSIGN, STAR, STAR_ASSIGN,
         TYPE_EXTENSION_AND"/>
      </module>
      <!-- 1 Line before each method (above its comment) -->
      <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
      </module>

      <!-- Modifier Checks                                    -->
      <!-- See http://checkstyle.sf.net/config_modifiers.html -->
      <module name="ModifierOrder"/>
      <module name="RedundantModifier"/>

      <!-- Checks for blocks. You know, those {}'s         -->
      <!-- See http://checkstyle.sf.net/config_blocks.html -->
      <module name="AvoidNestedBlocks"/>
      <module name="EmptyBlock">
         <property name="tokens" value="LITERAL_DO, LITERAL_ELSE,
         LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY,
         LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/>
      </module>
      <module name="NeedBraces"/>

      <!-- Checks for common coding problems               -->
      <!-- See http://checkstyle.sf.net/config_coding.html -->
      <module name="DefaultComesLast"/>
      <module name="EmptyStatement"/>
      <module name="EqualsHashCode"/>
      <module name="HiddenField"/>
      <module name="IllegalInstantiation"/>
      <module name="InnerAssignment"/>
      <module name="MissingSwitchDefault"/>
      <module name="MultipleStringLiterals"/>
      <module name="SimplifyBooleanExpression"/>
      <module name="SimplifyBooleanReturn"/>
      
      <module name="MultipleVariableDeclarations"/>
      <module name="VariableDeclarationUsageDistance"/>

      <!-- Checks for class design                         -->
      <!-- See http://checkstyle.sf.net/config_design.html -->
      <module name="InterfaceIsType"/>
      <module name="MutableException"/>
      <!-- no package or protected -->
      <module name="VisibilityModifier">
         <property name="allowPublicFinalFields" value="true"/>
      </module>

      <!-- Miscellaneous other checks.                   -->
      <!-- See http://checkstyle.sf.net/config_misc.html -->
      <module name="ArrayTypeStyle"/>
      <module name="TodoComment"/>
      <module name="UpperEll"/>

   </module>

</module>
